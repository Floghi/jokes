{
  "version": 3,
  "sources": ["browser-route-module:/home/ghilain/projects/jokes/app/routes/jokes/$jokeId.tsx?browser", "../../../../app/routes/jokes/$jokeId.tsx"],
  "sourcesContent": ["export { CatchBoundary, ErrorBoundary, default, meta } from \"/home/ghilain/projects/jokes/app/routes/jokes/$jokeId.tsx\";", "import type { Joke } from \"@prisma/client\";\nimport type {\n  ActionFunction,\n  LoaderFunction,\n  MetaFunction,\n} from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { useCatch, useLoaderData, useParams } from \"@remix-run/react\";\n\nimport { db } from \"~/utils/db.server\";\nimport { getUserId, requireUserId } from \"~/utils/session.server\";\nimport { JokeDisplay } from \"~/components/joke\";\n\nexport const meta: MetaFunction = ({\n  data,\n}: {\n  data: LoaderData | undefined;\n}) => {\n  if (!data) {\n    return {\n      title: \"No joke\",\n      description: \"No joke found\",\n    };\n  }\n  return {\n    title: `\"${data.joke.name}\" joke`,\n    description: `Enjoy the \"${data.joke.name}\" joke and much more`,\n  };\n};\n\ntype LoaderData = { joke: Joke; isOwner: boolean };\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const userId = await getUserId(request);\n  const joke = await db.joke.findUnique({ where: { id: params.jokeId } });\n  if (!joke) {\n    throw new Response(\"What a joke! Not found.\", { status: 404 });\n  }\n  const data: LoaderData = { joke, isOwner: userId === joke.jokesterId };\n  return json(data);\n};\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  const form = await request.formData();\n  if (form.get(\"_method\") !== \"delete\") {\n    throw new Response(`The _method ${form.get(\"_method\")} is not supported`, {\n      status: 400,\n    });\n  }\n  const userId = await requireUserId(request);\n  const joke = await db.joke.findUnique({\n    where: { id: params.jokeId },\n  });\n  if (!joke) {\n    throw new Response(\"Can't delete what does not exist\", { status: 404 });\n  }\n  if (joke.jokesterId !== userId) {\n    throw new Response(\"Pssh, nice try. That's not your joke\", {\n      status: 401,\n    });\n  }\n  await db.joke.delete({ where: { id: params.jokeId } });\n  return redirect(\"/jokes\");\n};\n\nexport default function JokeRoute() {\n  const data = useLoaderData<LoaderData>();\n\n  return <JokeDisplay joke={data.joke} isOwner={data.isOwner} />;\n}\n\nexport function CatchBoundary() {\n  const caught = useCatch();\n  const params = useParams();\n  switch (caught.status) {\n    case 400: {\n      return (\n        <div className=\"error-container\">\n          What you're trying to do is not allowed.\n        </div>\n      );\n    }\n    case 404: {\n      return (\n        <div className=\"error-container\">\n          Huh? What the heck is {params.jokeId}?\n        </div>\n      );\n    }\n    case 401: {\n      return (\n        <div className=\"error-container\">\n          Sorry, but {params.jokeId} is not your joke.\n        </div>\n      );\n    }\n    default: {\n      throw new Error(`Unhandled error: ${caught.status}`);\n    }\n  }\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n\n  const { jokeId } = useParams();\n  return (\n    <div className=\"error-container\">\n      There was an error loading joke by the id {jokeId}. Sorry.\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AASA,gBAAmB;AACnB,qBAAyC;AAGlC,IAAM,OAAqB,CAAC;AAAA,EACjC;AAAA,MAGI;AACJ,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,MACL,OAAO;AAAA,MACP,aAAa;AAAA;AAAA;AAGjB,SAAO;AAAA,IACL,OAAO,IAAI,KAAK,KAAK;AAAA,IACrB,aAAa,cAAc,KAAK,KAAK;AAAA;AAAA;AAuC1B,qBAAqB;AAClC,QAAM,OAAO;AAEb,SAAO,oCAAC,aAAD;AAAA,IAAa,MAAM,KAAK;AAAA,IAAM,SAAS,KAAK;AAAA;AAAA;AAG9C,yBAAyB;AAC9B,QAAM,SAAS;AACf,QAAM,SAAS;AACf,UAAQ,OAAO;AAAA,SACR,KAAK;AACR,aACE,oCAAC,OAAD;AAAA,QAAK,WAAU;AAAA,SAAkB;AAAA;AAAA,SAKhC,KAAK;AACR,aACE,oCAAC,OAAD;AAAA,QAAK,WAAU;AAAA,SAAkB,0BACR,OAAO,QAAO;AAAA;AAAA,SAItC,KAAK;AACR,aACE,oCAAC,OAAD;AAAA,QAAK,WAAU;AAAA,SAAkB,eACnB,OAAO,QAAO;AAAA;AAAA,aAIvB;AACP,YAAM,IAAI,MAAM,oBAAoB,OAAO;AAAA;AAAA;AAAA;AAK1C,uBAAuB,EAAE,SAA2B;AACzD,UAAQ,MAAM;AAEd,QAAM,EAAE,WAAW;AACnB,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KAAkB,8CACY,QAAO;AAAA;",
  "names": []
}
